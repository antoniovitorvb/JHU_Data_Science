library(swirl)
getwd()
setwd("~/GitHub/JHU_Lessons")
setwd("~/GitHub/JHU_Data_Science/R programming")
library(swirl)
setwd("D:/vitor/Documents")
install.packages("swirl")
library(swirl)
swirl()
swirl()
uninstall_course("R Programming")
install_course("R Programming E")
install_course("The R Programming Environment")
install_course("Regression Models")
install_course("Getting and Cleaning Data")
install_course("Statistical Inference")
install_course("Advanced R Programming")
install_course("Exploratory Data Analysis")
install_course("Data Analysis")
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package
by_package<-group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit("summarize1.R")
submit()
pack_sum
?group_by
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts, counts)
top_counts_sorted<-arrange(top_counts, count)
top_counts_sorted<-arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique, count)
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
View(cran)
write.csv(cran, "cran.csv")
test_cran<-read.csv("cran.csv")
test_cran
test_cran<-as.tibble(read.csv("cran.csv"))
test_cran<-as_tibble(read.csv("cran.csv"))
test_cran
library(swirl)
rm(list=ls())
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res<-gather(students2, sex_class, count)
res<-gather(students2, sex_class, count, -grade)
res
?separeta
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
?gather
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
?spread
?spread
submit()
submit()
submit()
library(readr)
parse_number("class5")
parse_number("class5")
submit()
?parse_number
parse_number("class55")
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
?unique
submit()
unique(student_info, id)
unique(student_info)
submit()
submit()
passed
failed
passed<-mutate(passed, status = "passed")
failed<-mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
swirl()
?gather
?pivot_longer
?gather
View(students)
View(students)
?separate
View(students2)
?spread
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
pivot_wider(test, grade) %>% print
vignette("pivot")
?gather
?separate
?spread
swirl()
rm(list=ls())
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment<-now()
this_moment
seconds(this_moment)
second(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd(March 12, 1975)
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment, hours = 20, minutes = 13)
this_moment
nyc<-now(tzone = "America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart, hours = 17, minutes = 34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long<-interval(last_time, arrive)
how_long
as.period(how_long)
stopwatch()
rm(list=ls())
library("swirl")
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res<-gather(students2, sex_class, count, -grade)
res
?separate
separate(res, col = sex_class, into = c("sex", "class"))
play()
library(dplyr)
arrange(separate(res, col = sex_class, into = c("sex", "class")), grade)
stu2<-separate(res, col = sex_class, into = c("sex", "class"))
group_by(stu2, grade)
stu2<-group_by(stu2, grade)
summarize(stu2, sum(count))
nxt()
submit()
students3
submit()
submit()
submit()
?spread
submit()
library(readr)
parse_number("class5")
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed<-mutate(passed, status = "passed")
failed<-mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
submit()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips<-sample(c(0,1), 100, prob = c(0.3, 0.7))
flips<-sample(c(0,1), 100, prob = c(0.3, 0.7), replace = TRUE)
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2<-rbinom(1, size = 100, prob = 0.7)
flips2<-rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, lambda = 10)
my_pois<-replicate(100, rpois(5,10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(cars, xlabel = "Speed")
plot(cars, xlab = "Speed")
plot(y = cars$speed, x = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(data = mtcars, formula = mpg ~ cyl)
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
rm(list = ls())
install.packages("XLConnect")
install.packages("Rtools40")
install.packages("XLConnect")
home<-getwd()
load("~/GitHub/JHU_Data_Science/3 Getting and Cleaning Data/.RData")
install.packages("XML")
install.packages("jsonlite")
head(cameraData)
head(cameraData)
print(head(cameraTB))
library(dplry)
cameraData<-read.csv("./data/fixed_speed_camera.csv")
library(data.table)
cameraTB<-as.data.table(cameraData)
head(cameraData)
print(head(cameraTB))
library(data.table)
DT<-data.table(x=rnorm(9), y=rep(c("a","b","c"), each = 3), z=rnorm(9))
DT
tables()
DT[2,]
DT[,2]
DT[1:3]
DT[2:4]
DT[,list(mean(x), sum(z))]
DT[,w:=x+z^2]
DT
getwd()
DT[,m:={aux<-x+z; log2(aux+%)}]
DT[,m:={aux<-x+z; log2(aux+5)}]
DT
DT[,bool:=x>0]
DT
DT[,grouped:=mean(x+w), by=a] # will operate mean(x+w) grouped by the values of a
DT[,grouped:=mean(x+w), by=bool] # will operate mean(x+w) grouped by the values of bool
DT
DT['a']
setkey(DT,y)
DT['a']
big_df<-data.frame(x=rnorm(1E6), y=10*rnorm(1E6))
file<-tempfile()
write.table(big_df, file = file, row.names = F, col.names = T, sep = "\t", quote = F)
system.time(fread(file))
system.time(read.table(file, header = T, sep = "\t"))
library(lubridate)
bd<-dmy("25-04-1996")
class(bd)
Sys.Date()-bd
heat.colors()
heat.colors(5)
image(t(heat.colors(10)))
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
"grDevices" %in% installed.packages()
update.packages()
update.packages()
pal(colorRamp(seq(0,1, length = 10)))
pal<-colorRampPalette(c("red", "yellow"))
class(pal)
pal(2)
pal(10)
library(swirl)
swirl()
0
"RColorBrewer" %in% installed.packages()
library(RColorBrewer)
cols<-brewer.pal(3, "BuGn")
cols
pal<-colorRampPalette(cols)
image(volcano, col = pal(20))
volcano
class(volcano)
x<-rnorm(10000)
y<-rnorm(10000)
smoothScatter(x,y)
setwd("~/GitHub/JHU_Data_Science/4 Exploratory Analysis")
library(swirl)
swirl()
cmat
points(cx, cy, col = c("red", "orange","purple"), pch = 3, cex = 2, lwd = 2)
mdist(x,y, cx, cy)
View(mdist)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x,y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x,y,col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x,y,col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x,y,col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
heatmap(dataMatrix)
View(distTmp2)
View(dataMatrix)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
scale(mat)
prcomp(scale(mat))
sdv1$v[,1]
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1<-1
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1:2] * svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- (svd1$u[,1:2] %*% svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
)
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
0
nxt()
dim(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1<-subset(ssd, subject == 1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist<-dist(sub1[,1:3])
hclustering<-hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist<-dist(sub1[,10:12])
hclustering<-hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1<-svd(scale(sub1[,-c(562, 563)]),)
svd1$u
dim(svd1$u)
maxCon<-which.max(svd1$v[,2])
mdist<-dist(sub1[,c(10:12, maxCon)])
hclustering<-hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
sub1[maxCon]
names(sub1[maxCon])
kClust<-kmeans(sub1[-c(562,563)], centers = 6)
kClust<-kmeans(sub1[, -c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust<-kmeans(sub1[, -c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying<-which(kClust$size==29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown<-which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Laying Cluster")
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
rm(list = ls())
