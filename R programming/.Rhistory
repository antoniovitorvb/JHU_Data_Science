pwd()
wd()
install.packages(c("swirl", "ggplot2"))
library(swirl)
swirl()
install_course("The R Programming Environment")
x <- c("Regression Models", "Getting and Cleaning Data", "Statistical Inference", "Advanced R Programming")
install_course(x)
install_course("Regression Models")
install_course("Getting and Cleaning Data")
install_course("Statistical Inference")
install_course("Advanced R Programming")
swirl()
install_course("Exploratory data analysis")
install_course("Exploratory analysis")
install_course("Exploratory Data Analysis")
swirl()
get wd()
getwd()
dir()
add2 <- function (x, y){
x + y
}
add2(5,6)
above <- function (x, n){
use <- x > n
x[use]
}
above(8,3)
x<-1:20
above(x,7)
above <- function (x, n = 10){ # if you specify here, it will serve as default values
use <- x > n
x[use]
}
above(x)
colmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i])
}
}
library(swirl)
swirl()
T==T
true == TRUE
TRUE == TRUE
(FALSE==TRUE)
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!7
5!=7
5!=7
5==7
!(5==7)
FALSE &FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8||6!=8 && 4>3.9
isTRUE(6>4)
play()
isTRUE(NA)
isTRUE(3)
nxt()
identical('twins', 'twins')
xor(5==6, !FALSE)
ints<-sample(10)
ints
ints>%
ints>5
which(ints>7)
any(ints<0)
all(ins>0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
play()
h<-function(x){
x<-2
}
h(x)
h<-function(x){
x<-2
x
}
h(x)
nxt()
submit()
boring_function('My first function!')
boring_function()
boring_function
mean
source('C:/Users/vitor/AppData/Local/Temp/RtmpkznKkr/my_mean.R')
submit()
my_mean(c(4,5,10))
my_mean(c(4,5,10))
View(h)
View(h)
View(my_mean)
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit
submit()
telegram(123)
submit()
mad_libs("anywhere", "dumb", "monumental")
?info
info()
arg<-["yo mama's", "dumbass", "Windows Vista"]
arg<-list("yo mama's", "dumbass", "Windows Vista")
play()
arg
arg[1]
arg[2]
arg[3]
arg[[1]]
arg[[3]]
nxt()
submit()
mad_libs("yo mama's", "dumbass", "Windows Vista")
submit()
mad_libs("yo mama's", "dumbass", "Windows Vista")
play()
5!
factorial(5)
submit()
submit()
"I"%p%"love"%p%"R!"
submit()
"%C%" <- function(n, p){
factorial(n) / (factorial(n-p)*factorial(p))
}
source('~/GitHub/JHU_lessons/R programming/combinatorics.R')
5%C%2
50%C%20
50%C%2
50%A%2
source('~/GitHub/JHU_lessons/R programming/combinatorics.R')
50%A%3
50%C%3
# recurssive factorial
fact <- function(x){
x*fact(x-1)
}
fact(5)
fact <- function(x){
if (x==0) return(1)
else return(x*fact(x-1))
}
fact(5)
source('~/GitHub/JHU_lessons/R programming/combinatorics.R')
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1<- Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
wekdays(d1)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
as.Date("05-05-2019")
us<-as.Date("2019-05-05")
class(us)
us
2y <- as.Date(2021-05-05)
2y <- as.Date("2021-05-05")
us2 <- as.Date("2021-05-05")
difftime(us2, us, units = "days")
difftime(us2, us, units = "hour")
difftime(us2, us, units = "min")
setwd("~/GitHub/JHU_lessons/R programming")
R.version.string
unzip("rprog_data_specdata.zip")
unzip("rprog_data_specdata.zip")
unzip("rprog_data_specdata.zip")
getwd()
paste(getwd(), "/specdata", sep = "")
file.exists(paste(getwd(), "rprog_data_specdata.zip", sep = ""))
getwd()
paste(getwd(), "rprog_data_specdata.zip", sep = "")
paste(getwd(), "/rprog_data_specdata.zip", sep = "")
file.exists(paste(getwd(), "/rprog_data_specdata.zip", sep = ""))
library(readr)
X001 <- read_csv("specdata/001.csv")
View(X001)
str(X001)
pol<-"sulfate"
X001$pol[1:10]
X001$sulfate[1:10]
X002 <- read_csv("specdata/002.csv")
Xall <- rbind(X001, X002)
view(Xall)
View(Xall)
Xall_rm <- rm.na(Xall)
Xall_rm <- na.omit(Xall$sulfate)
View(Xall_rm)
Xall_rm
Xall_rm <- !is.na(Xall$sulfate)
View(Xall_rm)
class(X001)
Xall_rm <- Xall[!is.na(Xall$sulfate)]
Xall_rm <- Xall[!is.na(Xall$sulfate),]
View(Xall)
View(Xall_rm)
View(Xall_rm)
?read_csv
require?
require
?require
require(readr)
require("readr")
require("xtable")
require("DeSolve")
require("deSolve")
require("deSolve")
require("reshape2")
if (!require("deSolve")) {install.packages("deSolve")}
X003 <- read_csv("specdata/003.csv", col_names = c("Date", "sulfate"))
View(X003)
View(X003)
?read_csv
X003 <- read_csv("specdata/003.csv", col_names = list("Date", "sulfate"))
problems(...)
str(X003)
X003 <- read_csv("specdata/003.csv", col_types = list(Date, sulfate))
X003 <- read_csv("specdata/003.csv", col_types = list("Date", "sulfate"))
XXX <- as.data.frame()
XXX <- as.data.frame([])
X003 <- read_csv("specdata/003.csv", col_types = cols_only("Date", "sulfate"))
X003 <- read_csv("specdata/003.csv", col_types = cols_only(c("Date", "sulfate")))
?cols_only
X003 <- read_csv("specdata/003.csv", cols_only(c("Date", "sulfate")))
X003 <- read_csv("specdata/003.csv", col_skip("sulfate")))
X003 <- read_csv("specdata/003.csv", col_skip("sulfate"))
class(X001$sulfate)
X003 <- read_csv("specdata/003.csv", col_types =  cols_only(Date = ))
X003 <- read_csv("specdata/003.csv", col_types =  cols_only(list(Date = "Date", sulfate = 'n')))
X003 <- read_csv("specdata/003.csv", cols_only(list(Date = "Date", sulfate = 'n')))
X003 <- read_csv("specdata/003.csv", cols_only(list(sulfate = 'n')))
X003 <- read_csv("specdata/003.csv", col_types = cols_only(list(sulfate = 'n')))
X003 <- read_csv("specdata/003.csv", col_types = do.call(cols_only, list(sulfate = 'n')))
X003 <- read_csv("specdata/003.csv", col_types = do.call(cols_only, list(Date = "D")))
X003 <- read_csv("specdata/003.csv", col_types = do.call(cols_only, list(Date = "d")))
X003 <- read_csv("specdata/003.csv", col_types = do.call(cols_only, list(Date = "D", sulfate = 'n')))
pol = "sulfate"
X003 <- read_csv("specdata/003.csv", col_types = do.call(cols_only, list(Date = "D", pol = 'n')))
tolower("GnU")
getwd
getwd()
list.files()
?list.files
head(?list.files(paste(getwd(), "/specdata", sep = ""), 10)
)
head(list.files(paste(getwd(), "/specdata", sep = ""), 10))
list.files(paste(getwd(), "/specdata", sep = ""))
list.files(paste(getwd(), "/specdata", sep = ""), full.names = T)
Data <- data.frame()
X003 <- read.csv("specdata/003.csv", col_types = do.call(cols_only, list(Date = "D", pol = 'n')))
?read.csv
View(X001)
View(X001)
XXX<-X003[!is.na(X003)]
XXX<-X001[!is.na(X001)]
XXX<-X001[!is.na(X001$sulfate)]
XXX<-X001[!is.na(X001$sulfate),]
View(XXX)
View(XXX)
?data.frame
XX<-X001[!is.na(X001[,2]),]
View(XX)
View(XX)
X001[,1]
X001[,2]
X001[!is.na(X001[,2])
]
X001[!is.na(X001[,2]),]
source('~/GitHub/JHU_lessons/R programming/pollutantmean.R')
pollutantmean(pollutant = "sulfate", id = 1:10)
selectedData <- data.frame() # Initializes dataframe
colnames(selectedData) <- c("Date", "pollutant")
x<-data.frame()
dim(x)<-c(1,2)
source('~/GitHub/JHU_lessons/R programming/pollutantmean.R')
pollutantmean(pollutant = "sulfate", id = 1:10)
View(Xall_rm)
View(Xall_rm)
setwd("~/GitHub/JHU_lessons/R programming/specdata")
XX<-read_csv(getwd(),
col_types = do.call(cols_only,
list(Date = "D",
sulfate = 'n')))
setwd("~/GitHub/JHU_lessons/R programming")
source('~/GitHub/JHU_lessons/R programming/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
source('D:/vitor/OneDrive/Data Science/JHU Data Science Specialization/activities/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
XX<-read_csv("specdata/004.csv",
col_types = do.call(cols_only,
list(Date = "D",
nitrate = 'n')))
View(XX)
View(XX)
list.files("specdata", full.names = T)
x<-data.frame
View(x)
View(x)
x<-data.frame()
colnames(selectedData) <- c("Date", "pollutant")
colnames(x) <- c("Date", "pollutant")
x<-rbind(x,c(1,2))
colnames(x) <- c("Date", "pollutant")
x
source('~/GitHub/JHU_lessons/R programming/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
